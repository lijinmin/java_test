package com.test1;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.swing.*;
public class MyTankGame2 extends JFrame implements ActionListener {

	/**
	 * @param args
	 */
//	游戏面板
	MyPanel my_panel = null;
//	开始面板
	MyStartPanel msp = null;
	JMenuBar jmb = null;
//	制作开始菜单
	JMenu jm1 = null;
	JMenuItem jmi1 = null;
//	退出系统
	JMenuItem jmi2 = null;
//	继续游戏
	JMenuItem jmi3 = null;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		MyTankGame2  game = new MyTankGame2();
		
	}
	
	public MyTankGame2(){
		
//		my_panel = new MyPanel();
//		Thread t = new Thread(my_panel);
//		t.start();
		
//		this.add(my_panel);
//		this.addKeyListener(my_panel);
//		this.addKeyListener(my_panel.hero);
		msp = new MyStartPanel();
		this.add(msp);
		Thread t = new Thread(msp);
		t.start();
		jmb = new JMenuBar();
		jm1 = new JMenu("游戏(G)");
		jm1.setMnemonic('G');
		jmi1 = new JMenuItem("开始新游戏(N)");
		jmi1.addActionListener(this);
		jmi1.setActionCommand("start_new");
		jmi1.setMnemonic('N');
		jmi2 = new JMenuItem("退出游戏(E)");
		jmi2.setMnemonic('E');
		jmi2.addActionListener(this);
		jmi2.setActionCommand("exit");
		jmi3 = new JMenuItem("继续游戏(C)");
		jmi3.setMnemonic('C');
		jmi3.addActionListener(this);
		jmi3.setActionCommand("continue");
		jm1.add(jmi1);
		jm1.add(jmi3);
		jm1.add(jmi2);
		jmb.add(jm1);
//		this.add(jmb,BorderLayout.NORTH);
		this.setJMenuBar(jmb);
		this.setSize(600, 500);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getActionCommand().equals("start_new"))
		{
			my_panel = new MyPanel();
			my_panel.addMouseListener(my_panel);
			Thread t = new Thread(my_panel);
			t.start();
			this.remove(msp);
			this.add(my_panel);
			this.addKeyListener(my_panel);
			this.addKeyListener(my_panel.hero);
//			刷新JFrame
			this.setVisible(true);  
		}else if (e.getActionCommand().equals("exit"))
		{
//			用户点击了推出系统的菜单
			Recorder.writeToFile();
//			保存敌人剩余坦克数 我的坦克生命值  我的总分值
			System.exit(0);
		}
	}

}
 //就是一个提示作用
 class MyStartPanel extends JPanel implements Runnable{
	 int times = 0;
	 public void paint(Graphics g){
		 super.paint(g);
		 g.fillRect(0, 0, 400, 300);
		 
		 if(times%2 == 0)
		 {
			 g.setColor(Color.yellow);
//			 设置字体
			 Font myFont = new Font("华文新魏",Font.BOLD,30);
			 g.setFont(myFont);
			 g.drawString("stage:1", 150, 150); 
		 }
	 }

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
			try {
				Thread.sleep(400);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			times++;
			this.repaint();
		}
	}
 }
//我的面板
 class MyPanel extends JPanel implements KeyListener,Runnable,ActionListener,MouseListener {
	 //	定义一个我的坦克
	 Hero hero = null;
	 Vector<Hero> heros = new Vector<Hero>();
//	 定义敌人坦克
	 Vector<EnemyTank> ets = new  Vector<EnemyTank>();
//	 定义炸弹
	 Vector<Bomb> bombs = new Vector<Bomb>();
//	 定义敌人坦克总数
	 int enSize = Recorder.getEnNum();
//	 定义初始化敌人坦克数量
	 int defaultEnSize = 4;
//	 定义敌人坦克的增加速度
	 int isIncre = 100;
//	 定义三张图片
	 Image image1 = null;
	 Image image2 = null;
	 Image image3 = null;
//	 定义panel的宽
	 int panel_h = 400;
//	 定义panel 的高
	 int panel_l = 300;
//	 定义暂停和继续
	 boolean isPause = false;
	 //	 构造函数
	 public MyPanel(){
		 
		 hero = new Hero(150,284);
//		 Recorder.reduceMy();
		 for(int i= 0 ;i <defaultEnSize;i++)
		 {
			 enSize--;
//			 Recorder.reduceEn();
			 int x = (int) (Math.random()*360) + 20;
			 int y = (int) (Math.random()*200) +20;
			 EnemyTank e = new EnemyTank(x,y);
			 ets.add( e);
			 Thread t = new Thread(ets.get(i));
			 t.start();
		 }
		 
//		 初始化三张图片
//		 image1 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource("/1.gif"));
//		 image2 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource("/2.gif"));
//		 image3 = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource("/3.gif"));
		 try {
			image1 = ImageIO.read(new File("/home/min/workspace/Class10/src/1.gif"));
			image2 = ImageIO.read(new File("/home/min/workspace/Class10/src/2.gif"));
			image3 = ImageIO.read(new File("/home/min/workspace/Class10/src/3.gif"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		 Bomb b = new Bomb(-30,-30);
//		 bombs.add(b);
	 }
	 
	 public void paint(Graphics g){
		 super.paint(g);
		 g.fillRect(0, 0, panel_h, panel_l);
//		 画出提示信息 
		this.drawInfo(g);
		 if(hero.isLive == true)
		 {
//			 画出自己的坦克
			 this.drawTank(hero.getX(),hero.getY(),g,hero.getDirect(),hero.getColor());
//			 画出自己的子弹
			 if(hero.shots != null)
			 {
				 synchronized(this)
				 {
					 for(Shot e : hero.shots)
					 {
						 if(e.isLive == true){
							 this.drawshot(e.getX(),e.getY(),g);
						 }else{
							 hero.is_fire = true;
						 }
					 }
				 }
			 }
		 }else{
			 Tank.tanks.remove(hero);
			 Recorder.reduceMy();
			 if(Recorder.getMyLife() > 0){
				 hero.setRestart(150,284,0);
			 }
		 }

//		 画出敌人的坦克
		 for(int i = 0; i < ets.size(); i ++ )
		 {
			 EnemyTank t = ets.get(i);
			 if(t.isLive == true)
			 {
				 this.drawTank(ets.get(i).getX(), ets.get(i).getY(), g, ets.get(i).getDirect(), ets.get(i).getColor());
				 if(ets.get(i).shots != null)
				 {
					 for(int ii = 0;ii < ets.get(i).shots.size(); ii++)
					 {
						 Shot e = ets.get(i).shots.get(ii);
						 if(e.isLive == true)
						 {
							 this.drawshot(e.getX(), e.getY(), g);
						 }else{
							 ets.get(i).shots.remove(e);
						 }
					 }
				 }	 
			 }else{
				 ets.remove(t);
				 Tank.tanks.remove(t);
				 Recorder.reduceEn();
			 }
		 }
//		 画出炸弹
		 for(int i = 0; i < bombs.size(); i ++)
		 {
			 
			Bomb b = bombs.get(i);
			 if(b.life >= 6)
			 {
				 g.drawImage(image3,b.x,b.y, 30, 30, this);
			 }
			 else if(b.life < 6&&b.life >= 3){
				 g.drawImage(image2,b.x,b.y, 30, 30, this);
			 }
			 else{
				 g.drawImage(image1,b.x,b.y, 30, 30, this);
			 }
			 b.lifeDown();
			 if(b.life == 0)
			 {
				 bombs.remove(b);
			 }
		 }
	 }
	 
//	 画坦克函数
	 public void drawTank(int x,int y,Graphics g,int direct ,int color){
		 switch(color){
		 case 0 :
			 g.setColor(Color.CYAN);
			 break;
		 case 1 :
			 g.setColor(Color.YELLOW);
			 break;
		 }
//		 准备画坦克
		 switch(direct){
		 case 0 :
			 g.fill3DRect(x -10, y -15, 5, 30,false);
			 g.fill3DRect(x +5,y - 15, 5, 30,false);
			 g.fill3DRect(x - 5, y - 10, 10, 20,false);
			 g.fillOval(x-5, y - 5, 10, 10);
			 g.drawLine(x , y , x , y -16);
			 break;
		 case 1 :
			 g.fill3DRect(x -15, y -10, 30, 5,false);
			 g.fill3DRect(x -15,y + 5, 30, 5,false);
			 g.fill3DRect(x - 10, y - 5, 20, 10,false);
			 g.fillOval(x-5, y - 5, 10, 10);
			 g.drawLine(x , y , x +16 , y);
			 break;
		 case 2 :
			 g.fill3DRect(x -10, y -15, 5, 30,false);
			 g.fill3DRect(x +5,y - 15, 5, 30,false);
			 g.fill3DRect(x - 5, y - 10, 10, 20,false);
			 g.fillOval(x-5, y - 5, 10, 10);
			 g.drawLine(x , y , x , y +16);
			 break;
		 case 3 :
			 g.fill3DRect(x -15, y -10, 30, 5,false);
			 g.fill3DRect(x -15,y + 5, 30, 5,false);
			 g.fill3DRect(x - 10, y - 5, 20, 10,false);
			 g.fillOval(x-5, y - 5, 10, 10);
			 g.drawLine(x , y , x -16 , y);
			 break;
		 }
	 }
//	 画子弹函数
	 public void drawshot(int x, int y,Graphics g)
	 {
		 g.fillOval(x, y, 3, 3);
	 }
//	 画提示信息函数
	 public void drawInfo(Graphics g){
//		 敌人坦克信息
		 this.drawTank(80,330,g,0,0); 
		 g.setColor(Color.black);
		 g.drawString(Recorder.getEnNum() + "", 110, 340);
//		 我方坦克信息
		 this.drawTank(160,330,g,0,1);
		 g.setColor(Color.black);
		 g.drawString(Recorder.getMyLife() + "", 190, 340);
//		 我方成绩信息
		 Font myFont = new Font("华文新魏",Font.BOLD,15);
		 g.setFont(myFont);
		 g.drawString("您的总成绩", 420, 20); 
		 g.drawString(Recorder.getMyScore1() + "", 460, 65);
		 this.drawTank(430,60,g,0,0);
	 }

	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyChar() == ' ')
		{
			isPause = !isPause;
			if(isPause == true)
			{
				for(int i =0 ; i < Tank.tanks.size(); i ++ )
				{
					Tank tank = Tank.tanks.get(i);
					tank.speed = 0;
					for(int ii = 0; ii < tank.shots.size(); ii ++)
					{
						Shot t = tank.shots.get(ii);
						t.speed = 0;
					}
				}
			}else{
				for(int i =0 ; i < Tank.tanks.size(); i ++ )
				{
					Tank tank = Tank.tanks.get(i);
					tank.speed = 1;
					for(int ii = 0; ii < tank.shots.size(); ii ++)
					{
						Shot t = tank.shots.get(ii);
						t.speed = 2;
					}
				}
				hero.speed = 2;
				for(int i = 0; i < hero.shots.size(); i++)
				{
					Shot t = hero.shots.get(i);
					t.speed = 3;
				}
			}
		}
		this.repaint();
	}

	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
//	判断子弹是否击中目标
	public void hitTank(Shot e,Tank t)
	{
		switch(t.direct)
		{
			case 0 :
			case 2 :
				if((e.x > t.x - 10 && e.x < t.x + 10)&&(e.y > t.y -15 && e.y < t.y + 15))
				{
					t.isLive = false;
					e.isLive = false;
					Bomb b = new Bomb(t.x,t.y);
					bombs.add(b);
				}
				break;
			case 1:
			case 3:
				if((e.x > t.x - 15 && e.x < t.x + 15)&&(e.y > t.y -10 && e.y < t.y + 10))
				{
					t.isLive = false;
					e.isLive = false;
					Bomb b = new Bomb(t.x,t.y);
					bombs.add(b);
				}
				break;
		}

			
	}
	
	public void increEn(){
		 if(this.enSize > 0)
		 {
			 enSize--;
//			 Recorder.reduceEn();
			 int x = (int) (Math.random()*360) + 20;
			 int y = (int) (Math.random()*200) +20;
			 EnemyTank e = new EnemyTank(x,y);
			 ets.add( e);
			 Thread t = new Thread(e);
			 t.start();
		 }
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
//			我方子弹打击敌方
			for(Shot e : hero.shots)
			{
				for(EnemyTank t  :  ets)
				{
					this.hitTank(e, t);
				}
			}
//			敌人子弹打我的坦克
			for(int i = 0;i < ets.size();i++)
			{
				for(int ii =0;ii<ets.get(i).shots.size();ii++)
				{
					Shot e = ets.get(i).shots.get(ii);
					if(hero.isLive == true)
					{
						this.hitTank(e, hero);
					}
				}
			}
//			增加敌人坦克
			if((isIncre==0|| ets.size()==0) && isPause == false)
			{
				this.isIncre = (int) (Math.random()*20) + 80;
				this.increEn();
			}else{
				this.isIncre--;
			}
			this.repaint();
		}
	}
//	判断敌人的坦克是否重叠运行
	public void enamyTank()
	{
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		isPause = !isPause;
		if(isPause == true)
		{
			for(int i =0 ; i < Tank.tanks.size(); i ++ )
			{
				Tank tank = Tank.tanks.get(i);
				tank.speed = 0;
				for(int ii = 0; ii < tank.shots.size(); ii ++)
				{
					Shot t = tank.shots.get(ii);
					t.speed = 0;
				}
			}
		}else{
			for(int i =0 ; i < Tank.tanks.size(); i ++ )
			{
				Tank tank = Tank.tanks.get(i);
				tank.speed = 1;
				for(int ii = 0; ii < tank.shots.size(); ii ++)
				{
					Shot t = tank.shots.get(ii);
					t.speed = 2;
				}
			}
			hero.speed = 2;
			for(int i = 0; i < hero.shots.size(); i++)
			{
				Shot t = hero.shots.get(i);
				t.speed = 3;
			}
		}
		this.repaint();
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
}
