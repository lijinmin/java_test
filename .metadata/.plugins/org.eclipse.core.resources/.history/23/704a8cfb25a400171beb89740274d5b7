package com.test1;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

//坦克类
class Tank{
//	坦克的方向 0 向上，1向右，2向下，3向左
	int direct= 0;
	//	坦克的横坐标
	int x=0;
	//	坦克的纵坐标
	int y=0;
//	坦克的速度
	int speed = 1;
//	颜色
	int color;
//	坦克枪长
	int gun = 16;
//	坦克子弹
	Shot shot = null;
	Vector<Shot> shots = null;
//	子弹的速度
	int shot_speed = 1;
//	是否死亡
	boolean isLive = true;
//	总的坦克对象
	boolean isTouch = false;
//	坦克的上下左右是否和另外一个坦克重叠
	boolean[] isTouchs = {false,false,false,false};
	static Vector<Tank> tanks = new Vector<Tank>();
//	定义一个坦克属性 代表敌方还是有方
	boolean isFriend = false;
	
	public int getGun() {
		return gun;
	}
	public void setGun(int gun) {
		this.gun = gun;
	}
	public int getColor() {
		return color;
	}
	public void setColor(int color) {
		this.color = color;
	}
	public int getSpeed() {
		return speed;
	}
	public void setSpeed(int speed) {
		this.speed = speed;
	}
	public int getDirect() {
		return direct;
	}
	public void setDirect(int direct) {
		this.direct = direct;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}

//	构造函数
	public Tank(int x ,int y){
		this.x  = x;
		this.y = y;
		this.shots = new Vector<Shot>();
		tanks.add(this);
	}
//	坦克向上移动
	public void moveUp()
	{
		this.direct = 0;
		if(this.y > 20)
		{	
			this.y -= speed;
		}
		
	}
//	坦克向右移动
	public void moveRight()
	{
		this.direct = 1;
		if(this.x < 380 && this.isTouch==false)
		{
			this.x += speed;
		}
	}
//	坦克向下移动
	public void moveDown()
	{
		this.direct = 2;
		if(this.y < 280)
		{
			this.y += speed;
		}
	}
//	坦克向左移动
	public void moveLeft()
	{
		this.direct = 3;
		if (this.x > 20)
		{
			this.x -= speed;
		}
	}
//	坦克的枪端口坐标
	public int[] getGunLocation(){
		int[] location = new int[2];
		switch(this.direct)
		{
		case 0 :
			location[0] = this.x;
			location[1]= this.y - this.gun;
			break;
		case 1 :
			location[0] = this.x + this.gun;
			location[1] = this.y;
			break;
		case 2 :
			location[0] = this.x;
			location[1] = this.y + this.gun;
			break;
		case 3 :
			location[0] = this.x - this.gun;
			location[1] = this.y;
		}
		return location;
		
	}
//	向对方开火
	public void shotFire()
	{	
		Shot e = new Shot(this.getGunLocation(),this.direct,this.shot_speed);
		shots.add(e);
		Thread t = new Thread(e);
		t.start();
	}
	
//	判断坦克之间是否重叠
	public void isTouchTank(){
		for(int i = 0; i < Tank.tanks.size();i++)
		{
//			System.out.println("touch");
			Tank e = Tank.tanks.get(i);
			if(this != e)
			{
				if((this.direct + e.direct)%2 == 1)
				{
					if(Math.abs(this.x - e.x) <= (27 + this.speed)  && Math.abs(this.y - e.y) <=(27 + this.speed) )
					{
//						this.isTouch = true;
						if(this.x < e.x && Math.abs(this.y - e.y) <= 16)
						{
//							System.out.println("touch");
							this.isTouchs[1] = true;
						}else if (this.x > e.x && Math.abs(this.y - e.y) <= 16)
						{
//							System.out.println("touch");
							this.isTouchs[3] = true;
						}else if (this.y < e.y && Math.abs(this.x - e.x) <= 16)
						{
//							System.out.println("touch");
							this.isTouchs[2] = true;
						}else{
//							System.out.println("touch");
							this.isTouchs[0] = true;
						}
					}
				}else if((this.direct + e.direct)/2 == 1)
				{
					if(Math.abs(this.x - e.x) <= (22 + this.speed) && Math.abs(this.y - e.y) <=(32 + this.speed) )
					{
//						this.isTouch = true;
						if(this.y < e.y)
						{
							this.isTouchs[2] = true;
						}else{
							this.isTouchs[1] = true;
						}
					}
				}else{
					if(Math.abs(this.x - e.x) <= (32 + this.speed)  && Math.abs(this.y - e.y) <=(22 + this.speed) )
					{
//						this.isTouch = true;
						if(this.x < e.x)
						{
							this.isTouchs[1] = true;
						}else{
							this.isTouchs[2] = true;
						}
					}
				}
			}
		}
	}
}

//敌人的坦克
class EnemyTank extends Tank implements Runnable{
//	开火时间间隔控制
	int is_fire = 10;
//	改变方向时间间隔控制
	int is_direct = 10;
	public EnemyTank(int x, int y) {
		super(x, y);
		this.setColor(0);
		this.setDirect(2);
		this.shot_speed = 2;
	}
//	定义另一个构造函数 用来恢复上一局
	public EnemyTank(Tank t){
		super(t.getX() , t.getY());
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			switch(this.direct)
			{
			case 0 :
				this.moveUp();
				break;
			case 1 :
				this.moveRight();
				break;
			case 2 :
				this.moveDown();
				break;
			case 3 :
				this.moveLeft();
				break;
			}
			if(this.is_direct == 0 && this.speed != 0)
			{
				this.changeDirect();
			}else if (this.is_direct != 0 && this.speed != 0)
			{
				this.is_direct--;
			}
			if(this.is_fire == 0 && this.speed != 0)
			{
				this.is_fire = (int) (Math.random()*80) + 80;
				this.shotFire();
			}else if (this.is_fire != 0 && this.speed != 0)
			{
				this.is_fire--;
			}
			if(this.isLive == false)
			{
				break;
			}
		}
		
	}
	
	public void moveUp(){
		this.isTouchTank();
		if(this.y > 20&& this.isTouchs[0] == false)
		{	
			this.y -= speed;
			this.isTouchs[0] = false;
			this.isTouchs[1] = false;
			this.isTouchs[2] = false;
			this.isTouchs[3] = false;
		}else{
			this.changeDirect();
		}
	}
	public void moveDown(){
		this.isTouchTank();
		if(this.y < 280&& this.isTouchs[2] == false)
		{
			this.y += speed;
			this.isTouchs[0] = false;
			this.isTouchs[1] = false;
			this.isTouchs[2] = false;
			this.isTouchs[3] = false;
		}else{
			this.changeDirect();
		}
	}
//	坦克向右移动
	public void moveRight()
	{
		this.isTouchTank();
		if(this.x < 380&& this.isTouchs[1] == false)
		{
			this.x += speed;
			this.isTouchs[0] = false;
			this.isTouchs[1] = false;
			this.isTouchs[2] = false;
			this.isTouchs[3] = false;
		}else{
			this.changeDirect();
		}
	}

//	坦克向左移动
	public void moveLeft()
	{
		this.isTouchTank();
		if (this.x > 20 && this.isTouchs[3] == false)
		{
			this.x -= speed;
			this.isTouchs[0] = false;
			this.isTouchs[1] = false;
			this.isTouchs[2] = false;
			this.isTouchs[3] = false;
		}else{
			this.changeDirect();
		}
	}
//	改变方向函数
	public void changeDirect(){
		int i = 0;
		while(true)
		{
			i = (int) (Math.random()*4);
			if(this.isTouchs[i] == false)
			{
				this.direct = i;
				break;
			}
		}
		this.is_direct = (int) (Math.random()*80) + 60;
	}
	
}
//我的坦克
class Hero extends Tank implements KeyListener{
	boolean is_fire = true;
//	构造函数
	public Hero(int x, int y) {
		super(x, y);
		this.setColor(1);
		this.isFriend = true;
		this.speed = 2;
		this.shot_speed = 3;
		
		// TODO Auto-generated constructor stub
	}
	
//	我的坦克爆炸后重新初始化
	public void setRestart(int x,int y,int direct){
		this.x = x;
		this.y = y;
		this.isLive = true;
		this.direct = direct;
	}
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyChar() == 's')
		{   
			this.moveDown();
		}else if(e.getKeyChar() == 'w')
		{
			this.moveUp();
		}else if(e.getKeyChar() == 'a')
		{
			this.moveLeft();
		}else if(e.getKeyChar() == 'd')
		{
			this.moveRight();
		}
		if(e.getKeyChar() == 'j')
		{
			if(this.is_fire == true)
			{
				this.is_fire = false;
				this.shots.removeAllElements();
				this.shotFire();
				try {
					Thread.sleep(500);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				this.shotFire();
			}			
		}
	}

	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	
}

//子弹
class Shot implements Runnable{
	int x;
	int y;
//	方向
	int direct;
//	速度
	int speed = 1;
//	是否死亡
	boolean isLive = true;
	public int getDirect() {
		return direct;
	}
	public void setDirect(int direct) {
		this.direct = direct;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public Shot(int[] args,int direct,int speed)
	{
		this.x = args[0];
		this.y = args[1];
		this.direct = direct;
		this.speed = speed;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
			switch(this.direct)
			{
			case 0 :
				this.y -= speed;
				break ;
			case 1 :
				this.x += speed;
				break;
			case 2 :
				this.y += speed;
				break;
			case 3 :
				this.x -= speed;
				break;
			}
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(this.x < 0 || this.x > 400 || this.y < 0 || this.y>300 || this.isLive == false)
			{
				this.isLive = false;
				break;
			}
		}
		
	}
}
class Bomb{
	int x,y;
	int life = 9;
	boolean isLive = true;
	
	public Bomb(int x,int y){
		this.x = x;
		this.y = y;
	}
	
	public void lifeDown(){
		if(this.life > 0)
		{
			life --;
		}else{
			this.isLive = false;
		}
	}
	
}
//记录类，并且保存玩家的一些设置
class Recorder
{
//	记录每关有多少敌人
	private static int enNum = 20;
	//	记录每关我 的生命数
	private static int myLife = 3;
//	记录我的成绩
	private static int myScore1=0;
//	相关数据记录文件
	private static FileWriter fw = null;
	private static BufferedWriter bw = null;
//	从记录文件中读取相关数据
	private static FileReader fr = null;
	private static BufferedReader br = null;
	public static int getMyScore1() {
		return myScore1;
	}
	public static void setMyScore1(int myScore1) {
		Recorder.myScore1 = myScore1;
	}
	public static int getEnNum() {
		return enNum;
	}
	public static void setEnNum(int enNum) {
		Recorder.enNum = enNum;
	}
	public static int getMyLife() {
		return myLife;
	}
	public static void setMyLife(int myLife) {
		Recorder.myLife = myLife;
	}
//	敌人坦克数减少
	public static void reduceEn(){
		enNum--;
		myScore1++;
	}
//	我的坦克生命数减少
	public static void reduceMy(){
		myLife--;
	}
	
//	数据记录文件函数
	public static void writeToFile(){
		try {
			fw = new FileWriter("/home/min/workspace/Class14/src/record.txt");
			bw = new BufferedWriter(fw);
			bw.write("enNum:" + enNum + "\r\n");
			bw.write("myLife:" + myLife + "\r\n");
			bw.write("myScore1:" + myScore1 + "\r\n");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				bw.close();
				fw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
		}
	}
	public static void readFromFile(){
		try {
			fr = new FileReader("/home/min/workspace/Class14/src/record.txt");
			br = new BufferedReader(fr);
			while(br.ready())
			{
				String str = br.readLine();
				switch(str.split(":")[0])
				{
				case "enNum" :
					Recorder.setEnNum(Integer.parseInt(str.split(":")[1]));
					break;
				case "myLife" :
					Recorder.setMyLife(Integer.parseInt(str.split(":")[1]));
					break;
				case "myScore1" :
					Recorder.setMyScore1(Integer.parseInt(str.split(":")[1]));
					break;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				br.close();
				fr.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}